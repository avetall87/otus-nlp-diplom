import logging
import os
from datetime import datetime
from logging import handlers
import time
import requests

import telebot
from telebot import types
from telebot.types import User
from dotenv import dotenv_values

from answer_service.answer_service import get_answer

config = dotenv_values("./bot/env/.env")
bot = telebot.TeleBot(config.get("TG_BOT_TOKEN"))


@bot.message_handler(commands=["start"])
def start(m, res=False):
    bot.send_message(m.chat.id, '–ü—Ä–∏–≤–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å, —è –Ω–∞ —Å–≤—è–∑–∏. –ó–∞–¥–∞–≤–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ...')


@bot.message_handler(commands=["info"])
def info(message):
    info_message_handle(message)


@bot.message_handler(commands=["question"])
def question(message):
    bot.send_message(message.chat.id, '–ó–∞–¥–∞–≤–∞—Ç–µ –≤–æ–ø—Ä–æ—Å ...')


def info_message_handle(message):
    bot.send_message(message.chat.id, f'''üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {get_user_name(message.from_user)}!
–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –∫–æ—Ç–æ—Ä–æ–º—É –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Ç–µ–º–∞—Ç–∏–∫—É –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ö–§–§–î.''')

@bot.message_handler(content_types=['text'])
def find_answer(message):
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å, –Ω–∞—á–∞–ª –∏—Å–∫–∞—Ç—å –æ—Ç–≤–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ...')
    bot.send_message(message.chat.id, f'–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:\n{get_answer(message.text)}')


def get_user_name(user: User) -> str:
    if user is None:
        return ''

    if user.last_name != '' or user.first_name != '':
        return f'{user.first_name} {user.last_name}'.strip()

    if user.username is not None:
        return user.username


def main():
    try:
        logging.info("–Ø –∑–∞–ø—É—Å—Ç–∏–ª—Å—è :)")

        bot.polling(none_stop=True, interval=0, timeout=60)
    except Exception as e:
        logging.error(f'Bot pooling exception - main function \n {e}')
        exit(1)


if __name__ == '__main__':
    main()